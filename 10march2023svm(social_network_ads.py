# -*- coding: utf-8 -*-
"""10march2023svm(social network ads

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13kT7Dq-INDh2VS68C-K3-kHPQPECmsGD
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv("/content/Social_Network_Ads.csv")

dataset

#slpit dataset into x and y

x = dataset.iloc[:, [2,3]].values
y = dataset.iloc[:, 4].values

#Independent Variables --> x
#Dependent Variables --> y

#Split the X and Y Dataset into the Training set and Test set
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test =  train_test_split(x,y, test_size=0.25, random_state=0)

x_test

x_train

y_test

y_train

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

x_train

x_test

#Perform Feature scaling 
#in the dataset all values are not in the same range hence we use feature scaling to overcome this problem 
#feature scaling helps us normalize data within the range 

#fit_transform will fit all the data in the variable

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()
X_Train=sc.fit_transform(x_train)
X_Test=sc.fit_transform(x_test)

X_Train

X_Test

#Fit SVM to the Training set

from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf', random_state=0)
classifier.fit(x_train, y_train)

#Predict the Test Set Results

y_pred = classifier.predict(x_test)

#make the Confusion Matrix

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
print()
print("****************************")
print("Accuracy")
accuracy_score(y_test,y_pred)

#Visualise the test set results 
from matplotlib.colors import ListedColormap

X_set, y_set = X_test, y_test
X1 , X2 = np.meshgrid(np.arange(start = X_set[:,0].min() - 1 , stop = X_set[:,0].max() + 1 , step = 0.01),
                      np.arange(start = X_set[:,1].min() - 1 , stop = X_set[:,1].max() + 1 , step = 0.01))

plt.contour(X1 , X2 , classifier.predict(np.array([X1.ravel(),X2.ravel()]).T).reshape(X1.shape),
            alpha=0.75 , cmap = ListedColormap(("red","green")))

plt.xlim(X1.min(),X1.max())
plt.xlim(X2.min(),X2.max())

for i , j in enumerate (np.unique(y_set)):
  plt.scatter(X_set[y_set==j,0],X_set[y_set == j ,1 ], c = ListedColormap(("red","green"))(i),label=j)
plt.title("SVM(Test set)")
plt.xlabel("Age")
plt.ylabel("Estimated salary")
plt.legend()
plt.show()